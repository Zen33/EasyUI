0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/bin/node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@3.7.5
3 info using node@v5.6.0
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/home/james/Development/EasyUI',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /home/james/.npm/easyui/2.4.0/package.tgz not in flight; packing
9 verbose correctMkdir /home/james/.npm correctMkdir not in flight; initializing
10 info lifecycle easyui@2.4.0~prepublish: easyui@2.4.0
11 silly lifecycle easyui@2.4.0~prepublish: no script for prepublish, continuing
12 verbose tar pack [ '/home/james/.npm/easyui/2.4.0/package.tgz',
12 verbose tar pack   '/home/james/Development/EasyUI' ]
13 verbose tarball /home/james/.npm/easyui/2.4.0/package.tgz
14 verbose folder /home/james/Development/EasyUI
15 verbose addLocalTarball adding from inside cache /home/james/.npm/easyui/2.4.0/package.tgz
16 verbose correctMkdir /home/james/.npm correctMkdir not in flight; initializing
17 silly cache afterAdd easyui@2.4.0
18 verbose afterAdd /home/james/.npm/easyui/2.4.0/package/package.json not in flight; writing
19 verbose correctMkdir /home/james/.npm correctMkdir not in flight; initializing
20 verbose afterAdd /home/james/.npm/easyui/2.4.0/package/package.json written
21 silly publish { name: 'easyui',
21 silly publish   author: { name: 'James Smith' },
21 silly publish   version: '2.4.0',
21 silly publish   repository: {},
21 silly publish   dependencies: {},
21 silly publish   devDependencies:
21 silly publish    { grunt: '^0.4.5',
21 silly publish      'grunt-contrib-watch': '^0.6.1',
21 silly publish      'grunt-browserify': '^4.0.1',
21 silly publish      'grunt-bumpup': '^0.6.3',
21 silly publish      'grunt-shell': '^1.2.1' },
21 silly publish   readme: '# EasyUI\n\nA V-framework.\n\nEasyUI is an MVC framework without the M and without the C. It\'s without a model, only abstracting away from the view, namely the document object model. There is some irony here. It\'s without a controller, or whatever. It will not help you with the architecture of your large application. It is about the leaves of an application, not its branches. \n\nIt leverages jQuery to provide a very basic set of classes for DOM elements such as buttons, links, etc. It covers up jQuery\'s idiosyncratic syntax and is more readable. It allows you to associate JavaScript classes directly with static HTML, you don\'t have to dynamically create DOM elements unless you want to. Few frameworks allow you to do this without fuss.\n\nIt\'s liberating to cast off the dogma that says that an application\'s view and model always have to be two sides of the exact same coin. And you won\'t have to wade through hundreds of lines of obscure source code when things slow down or start to go wrong. The nearest thing to EasyUI is ReactJS but EasyUI is an order of magnitude less complex. \n\n## Related projects\n\n- [EasyUI-Layout](https://github.com/djalbat/EasyUI-Layout) Layout components that work with CSS flexbox.\n- [EasyUI-Explorer](https://github.com/djalbat/EasyUI-Explorer) A file explorer with drag and drop functionality. \n- [Florence](https://github.com/jecs-imperial/Florence) A collaborative proof assistant that depends on all three EasyUI projects. \n \n## Installation\n\nIf you\'re running [Node.js](http://nodejs.org) you can install EasyUI with [npm](https://www.npmjs.com/):\n\n    npm install easyui\n\nClient-side you can take the `easyui.js` file in the `dist/` folder put it somewhere and reference it via the usual script element:\n \n```html\n<script src="scripts/lib/easyui.js"> </script>\n```\n\nThis will give you a global `easyui` variable which you use directly:\n  \n```js\nvar Button = easyui.Button;\n```\n \nIf you\'re using AMD require client-side or CommonJS server-side the syntax for requiring EasyUI is the same:\n\n```js\nvar easyui = require(\'lib/easyui\'),\n    Select = easyui.Select,\n    Checkbox = easyui.Checkbox;\n```\n\njQuery is not bundled with EasyUI so you will need to include it explicitly whichever way you feel is best.\n\n## Documentation\n\nSee the `examples.html` file in the `docs/` folder for some examples.\n\n#### Working example\n\nHere an element corresponding to the `body` DOM element is constructed and an outer `div` element is appended to that. `Div` elements corresponding to two of the three inner `div`s are then constructed. Note there are no references. These can be recovered by iterating over the child elements of the outer `div`. Note also that there is no second inner `div`, since no corresponding `Div` element has been created for it.   \n\n```js\nvar body = new Body(),\n    outerDiv = Div.fromHTML(\'<div><div id="firstDiv"></div><div id="secondDiv"></div><div id="thirdDiv"></div></div>\');\n\nbody.append(outerDiv);\n\nnew Div(\'#firstDiv\');\nnew Div(\'#thirdDiv\');\n\nvar outDivChildElements = outerDiv.childElements();\n\noutDivChildElements.forEach(function(outDivChildElement) {\n  var outDivChildElementId = outDivChildElement.getAttribute(\'id\');\n\n  console.log(outDivChildElementId);    // firstDiv, thirdDiv\n});\n```\n\nEssentially you bind instances of EasyUI classes to DOM elements via jQuery, making use of jQuey\'s selector syntax. \n\nIn the [EasyUI-Explorer](https://github.com/djalbat/EasyUI-Explorer) project this approach is used to good effect. The explorer has no model as such, just a nested collection of elements bound to the DOM. One way to think of it is as a widget for viewing and manipulating file paths. The files themselves are part of the application\'s model but they are quite separate from the explorer, held in an array somewhere else in fact. \n\nThis is the EasyUI approach, not binding an application\'s model and view tightly unless it makes sense to do so. \n\n#### Creating elements \n\nYou can pass jQuery selectors to constructors:\n\n```js\nvar link = new Link(\'#link\', function(href) {\n  console.log(\'Link click with href \' + href);\n});\n```\n\nOr you can use HTML snippets with the `fromHTML()` factory method of any relevant class:\n\n```js\nvar checkboxFromHTML = Checkbox.fromHTML(\'<input type="checkbox"/>\');\n```\n\nIf constructors take change or click handlers you can pass these to `fromHTML()` methods.\n\n#### Cloning elements\n\nYou can call the `clone()` method of an element. If your element has an `id` attribute it\'s best to remove this from the cloned element:\n \n```js\nvar button = new Button(\'#button\'),\n    clonedButton = button.clone();\n     \nclonedButton.removeAttribute(\'id\');\n```\n\nYou can also use the `clone()` factory methods of the relevant classes and pass jQuery selectors. Again remove the `id` attribute from the cloned element if necessary:\n\n```js\nvar clonedButton = Button.clone(\'#button\');\n     \nclonedButton.removeAttribute(\'id\');\n```\n\nWhen you clone an existing element you will need to re-register any click or change handlers. You can pass these straight to the `clone()` methods if you like.\n\n#### Standard methods\n\nEach element class extends the `Element` class and therefore has the same standard methods. These do nothing much apart from ape jQuery functionality:\n\n- `show`\n- `hide`\n- `enable`\n- `disable`\n- `getWidth`\n- `getHeight`\n- `setWidth`\n- `setHeight`\n- `getAttribute`\n- `addAttribute`\n- `removeAttribute`\n- `prependBefore`\n- `appendAfter`\n- `prepend`\n- `append`\n- `remove`\n- `hasClass`\n- `addClass`\n- `removeClass`\n- `removeClasses`\n- `html`\n- `css`\n- `on`\n\n#### Other methods\n\n- `getBounds`, returns an instance of the `Bounds` class with the `top`, `left`, `bottom` and `right` bounds of the element.\n- `onMouseXXX`, each apes jQuery functionality except that it calls the handler with `mouseTop`, `mouseLeft` and `mouseButton` rather than the event object. If you want the event object, use the `on()` method. The value of the `mouseButton` argument is either `Element.LEFT_MOUSE_BUTTON`, `Element.MIDDLE_MOUSE_BUTTON` or `Element.RIGHT_MOUSE_BUTTON`.\n- `childElements` returns all the immediate descendants\n- `findElements` returns all the descendants\n- `sameAs` returns true if the argument and instance share the same DOM element.\n\n\nThe methods to add elements to the DOM are hopefully intuitive. Note the difference between the `append()` and `appendAfter()` methods. \n\n```js\nvar button = Button.fromHTML(\'<button/>\'),\n    select = Select.fromHTML(\'<select><option>a</option></select>\');\n    \nselect.appendAfter(button); // what you want\nselect.append(button); // not what you want\n```\n\nThe `appendAfter()` call above results in the following HTML:\n\n```html\n<select><option>a</option></select></button>\n```\n\nThe `append()` call above results in the following HTML and is probably not what you want in this instance:\n\n```html\n<select><option>a</option></button></select>\n```\n\nSimilarly for the `prepend()` and `prependBefore()` methods.\n\n#### Supported elements:\n\n- `Body`\n- `Div`\n- `Button`\n- `Checkbox`\n- `Input`\n- `Link`\n- `Select`\n\nObviously the list is incomplete. Use the `Element` class if there is no relevant class, submit a pull request or roll your own.\n\n#### Rolling your own elements\n\nThis is easily done. We take the `Checkbox` class as an example. Use the `clone()` factory method of the `Element` class to create your own element, passing it your class followed by all the arguments for its constructor:\n \n```js\nCheckbox.clone = function(selectorOr$Element, clickHandler) {\n  return Element.clone(Checkbox, selectorOr$Element, clickHandler);\n};\n```\n\nThe `fromHTML()` method is also boilerplate:\n\n```js\nCheckbox.fromHTML = function(html, clickHandler) {\n  return Element.fromHTML(Checkbox, html, clickHandler);\n};\n```\n\nWhen writing the constructor, the `Element\' constructor from within your own:\n\n```js\nvar Checkbox = function(selectorOr$Element, clickHandler) {\n  inherits(this, new Element(selectorOr$Element));\n\n  ...\n};\n```\n\nThe first argument should be `selectorOr$Element` which you don\'t have to worry about but should pass straight to the constructor of the `Element` class.\n\nYou can also create a `clone()` method by passing the private `$element` property to the `clone()` factory method. \n\n```js\nCheckbox.prototype = {\n  clone: function(clickHandler) { return Checkbox.clone(this.$element, clickHandler); },\n  \n  ...\n  \n  isChecked: function() {\n    return this.$element.is(\':checked\');\n  }\n};\n```\n\nNote that you can also use the `$element` property to ape jQuery functionality, as the `isChecked()` method shows.\n    \n## Contact\n\n- james.smith@djalbat.com\n- http://djalbat.com\n',
21 silly publish   readmeFilename: 'README.md',
21 silly publish   gitHead: 'b58b248163443763b8cfe38a39f1882efce583cf',
21 silly publish   description: 'A V-framework.',
21 silly publish   _id: 'easyui@2.4.0',
21 silly publish   scripts: {},
21 silly publish   _shasum: '54097bd184f97a44cbb9dfce13a54d003d185834',
21 silly publish   _from: '.' }
22 verbose getPublishConfig undefined
23 silly mapToRegistry name easyui
24 silly mapToRegistry using default registry
25 silly mapToRegistry registry https://registry.npmjs.org/
26 silly mapToRegistry uri https://registry.npmjs.org/easyui
27 verbose publish registryBase https://registry.npmjs.org/
28 silly publish uploading /home/james/.npm/easyui/2.4.0/package.tgz
29 verbose request uri https://registry.npmjs.org/easyui
30 verbose request sending authorization for write operation
31 info attempt registry request try #1 at 6:23:13 PM
32 verbose request using bearer token for auth
33 verbose request id ee8d04bb5f1b76bf
34 http request PUT https://registry.npmjs.org/easyui
35 http 403 https://registry.npmjs.org/easyui
36 verbose headers { 'content-type': 'application/json',
36 verbose headers   'cache-control': 'max-age=300',
36 verbose headers   'content-length': '95',
36 verbose headers   'accept-ranges': 'bytes',
36 verbose headers   date: 'Thu, 10 Mar 2016 18:23:14 GMT',
36 verbose headers   via: '1.1 varnish',
36 verbose headers   connection: 'keep-alive',
36 verbose headers   'x-served-by': 'cache-ams4127-AMS',
36 verbose headers   'x-cache': 'MISS',
36 verbose headers   'x-cache-hits': '0',
36 verbose headers   'x-timer': 'S1457634193.152172,VS0,VE1260' }
37 verbose request invalidating /home/james/.npm/registry.npmjs.org/easyui on PUT
38 error publish Failed PUT 403
39 verbose stack Error: "You cannot publish over the previously published version 2.4.0." : easyui
39 verbose stack     at makeError (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:264:12)
39 verbose stack     at CachingRegistryClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:252:14)
39 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:172:14)
39 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:199:22)
39 verbose stack     at emitTwo (events.js:100:13)
39 verbose stack     at Request.emit (events.js:185:7)
39 verbose stack     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1036:10)
39 verbose stack     at emitOne (events.js:95:20)
39 verbose stack     at Request.emit (events.js:182:7)
39 verbose stack     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:963:12)
40 verbose statusCode 403
41 verbose pkgid easyui
42 verbose cwd /home/james/Development/EasyUI
43 error Linux 3.16.0-62-generic
44 error argv "/usr/local/bin/node" "/usr/local/bin/npm" "publish"
45 error node v5.6.0
46 error npm  v3.7.5
47 error code E403
48 error "You cannot publish over the previously published version 2.4.0." : easyui
49 error If you need help, you may report this error at:
49 error     <https://github.com/npm/npm/issues>
50 verbose exit [ 1, true ]
